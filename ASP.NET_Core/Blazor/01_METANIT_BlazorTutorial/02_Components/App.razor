@* 
Класс Router позволяет настроить маршрутизацию между компонентами с помощью следующих свойств:
 - AppAssembly: представляет сборку, в которой будет идти поиск компонентов для сопоставления с маршрутами
 - AdditionalAssemblies: представляет коллекцию дополнительных сборок, где будет идти поиск компонентов для сопоставления с маршрутами
 - Found: представляет содержимое, которое отображается, если для определенного маршрута найден соответствующий компонент
 - NotFound: представляет содержимое, которое отображается, если для определенного маршрута НЕ найден соответствующий компонент
 - Navigating: представляет содержимое, которое отображается в процессе асинхронной навигации
 - OnNavigateAsync: представляет обработчик, который вызывается перед переходом на новую страницу
*@

<!--
При определении компонента Router необходимо прежде всего определить параметр AppAssembly - сборку,
где искать компоненты, которые будут сопоставляться с маршрутами. 
Когда приложение запускается впервые, роутер с помощью рефлексии просматривает сборки приложения 
(свойства AppAssembly и AdditionalAssemblies) на наличие любых маршрутизируемых компонентов. 
Затем информацию о подобных компонентах сохраняется в таблице маршрутизации. 
И когда нажимается ссылка или навигация запускается программно, роутер получает запрошенный маршрут 
и пытается найти соответствие в таблице маршрутизации. 
Если совпадение найдено, он загрузит содержимое из свойства Found 
(обычно это компонент, который соответствует маршруту). 
Если совпадение не найдено, то загружается содержимое из свойства NotFound.
-->

<!-- 
    Чтобы передать компоненту Router текущую сборку, используется выражение 
    @typeof(Program).Assembly. То есть получаем тип класса Program, а затем его сборку.
-->

<Router AppAssembly="@typeof(App).Assembly">
    <!--
        У компонента Found устанавливается свойство Context, которое представляет объект RouteData 
        и привязано к переменной routeData. И компонент RouteView через свойство RouteData получает
        данные маршрутизации из переменной routeData. На основании этих данных RouteView будет 
        использовать определенный компонент для установки содержимого.
    -->
    <Found Context="routeData">
        <!-- 
            Чтобы браузер отображал содержимое компонентов, которые сопоставляются с маршрутами, 
            нужен встроенный компонент - RouteView. Через свойство RouteData он принимает данные 
            маршрутизации в виде одноименного объекта RouteData и на основании этих данных рендерит 
            определенный компонент, который соответствует маршруту запроса.

            Для использования компонента компоновки в процессе маршрутизации у компонента 
            RouteView определено свойство DefaultLayout, которое принимает тип компонента компоновки.
            Здесь с помощью атрибута DefaultLayout="@typeof(MainLayout)" у компонента RouteView
            в качестве компонента компоновки устанавливается класс MainLayout.
            Структура приложения будет определяться компонентом компоновки MainLayout, 
            а при переходе по ссылкам он будет вставлять вместо @Body содержимое выбранного компонента:
        -->
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <!-- Если мы пройдем по пути, который не существует, то нам отобразится содержимое компонента <NotFound> -->
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <!--
            Встроенный компонент LayoutView позволяет вложить содержимое в компонент компоновки.
            С помощью свойства Layout класс LayoutView устанавливает компонент компоновки.
            Внутрь компонента LayoutView передается содержимое которое представляет свойство ChildContent
            и которое будет отображаться в компоненте компоновки вместо выражения @Body:
        -->
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Такого маршрута не существует</p>
        </LayoutView>
    </NotFound>
</Router>

@*
@using Microsoft.AspNetCore.Components.Web

<h2>------------------------------------------</h2>
<h1>APP RAZOR</h1>

<button @onclick="Click">+</button>
<span>@currentCount</span>

@code {
    private int currentCount = 0;
    private void Click() => currentCount++;
}
*@


@* Параметры компонентов 

@using _02_Components.Components

<h1>Hello Blazor</h1>
<Home Title="Home Page" />
<Home Title="@someTitle" />
<Home />

@code{
    string someTitle = "Main Page";
}

<h2>------------------------------------------</h2>
<Home Count="@users.Count" Users="@users"></Home>

@code {
    List<string> users = new List<string> { "Tom", "Bob", "Sam", "Mike" };
}
*@