@page "/Binding"
@using Microsoft.AspNetCore.Components.Web

<h1>Binding Page</h1>

@*
    Привязку данных можно выполнить к любому атрибуту элемента html. 
    Например, у элемента ввода input есть атрибут value, который представляет 
    введенное в элемент значение. Для привязки к этому атрибуту значения 
    применяется атрибут @bind-value (то есть @bind-[название_атрибута]).
*@

<div>
    <!-- Для элементов ввода input вместо @bind-value можно использовать его сокращенную версию - @bind: -->
    <input @bind-value="@item" />
    <p>Value: @item</p>
</div>

@code {
    string item = "hello";
}

@*
    @bind-атрибут:event
    С помощью атрибута @bind-атрибут:event у элементов HTML можно назначить другое событие,
    которое будет изменять привязанное к элементу значение. 
    По умолчанию за это отвечает событие onchange, которое срабатывает, когда элемент ввода теряет фокус.
    Так, в примере выше, чтобы после ввода нового значения в текстовое поле 
    изменилось значение переменной item, необходимо было убирать фокус с элемента ввода.
    Это может быть неудобно. Допустим, мы хотим сразу изменять значение.
    Для этого используем для обработки изменения значения событие oninput:
*@

<br />
<div>
    <input @bind="@item" @bind:event="oninput" />
    <p>Value: @item</p>
</div>


@* Постобработка изменения значения 
    Чтобы выполнить после установки значения некоторую асинхронную обработку,
    применяется атрибут @bind:after, которому передается выполняемое действие:
    @bind:after="действие"
*@

<input @bind="searchText" @bind:after="PerformSearch" />

<ul>
    @foreach (var item in found) {
        <li>@item</li>
    }
</ul>

@code {
    // условная база данных
    List<string> items = new() { "Tom", "Sam", "Bob", "Kate", "Alice", "Tomas" };
    
    // найденные данные
    List<string> found = new();
    
    // ключ поиска
    string searchText = "";
    
    async Task PerformSearch() {
        // для имитации долгой работы
        // await Task.Delay(400);
        await Task.Delay(10);
        found = items.Where(item => item.Contains(searchText)).ToList();
    }
}
